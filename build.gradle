plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    // for rest docs
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.triple'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions

    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // for validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // for jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // for p6spy
    implementation 'com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.8.0'

    // for mongodb
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // for mysql-connector
    runtimeOnly 'mysql:mysql-connector-java'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // for test
    testImplementation 'com.h2database:h2'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:3.4.6'

    // for java annotation
    compileOnly 'org.jetbrains:annotations:23.0.0'

    // for lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // for rest docs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

}

ext {
    snippetsDir = file('build/generated-snippets')
}


test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    dependsOn test
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
    baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}
